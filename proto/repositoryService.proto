syntax = "proto3";
package repositoryService;

import "donationReceiver.proto";
import "user.proto";


service UserRepositoryService {
    rpc FindAllUsers (user.Empty) returns (user.Users) {}
    rpc CreateUser(user.CreateUserDto) returns (user.User) {}
    rpc FindOneByEmail(user.Email) returns (user.User) {}
    rpc FindOneById(user.Id) returns (user.User) {}
    rpc GetProfiles(user.Id) returns (user.UserProfiles) {}
    rpc UpdateUserProfile(user.UpdateUserProfileRequest) returns (user.User) {}
    rpc UpdateUserStripeCustomerId(UpdateUserStripeCustomerIdRequest) returns (user.User) {}
}

service DonationReceiverRepositoryService {
    rpc FindOneByUser(donationReceiver.FindOneByUserRequest) returns (donationReceiver.FindOneDrResponse) {}
    rpc FindOneByUid(donationReceiver.FindOneByUidRequest) returns (donationReceiver.FindOneDrResponse) {}
    rpc FindOneNotVerified(donationReceiver.FindOneByUidRequest) returns (donationReceiver.FindOneDrResponse) {}
    rpc FindOneByOnboardingToken(donationReceiver.FindOneByOnboardingTokenRequest) returns (donationReceiver.FindOneDrResponse) {}
    rpc FindAllVerified(donationReceiver.FindAllVerifiedRequest) returns (donationReceiver.DonationReceivers) {}
    rpc Create(donationReceiver.CreateDonationReceiverRequest) returns (donationReceiver.DonationReceiver) {}
    rpc UpdateProfile(donationReceiver.UpdateProfileRequest) returns (donationReceiver.DonationReceiver) {}
    rpc UpdateConnectedAccountInfor(donationReceiver.UpdateConnectedAccountInforRequest) returns (donationReceiver.DonationReceiver) {}
    rpc UpdateVerifyInfor(donationReceiver.UpdateVerifyInforRequest) returns (donationReceiver.DonationReceiver) {}
}

service DonationRepositoryService {
    rpc GetDonationCountByDrId(GetDonationCountByDrIdRequest) returns (GetDonationCountByDrIdResponse) {}
}

service StripeConnectCustomerRepositoryService {
    rpc Create(CreateConnectCustomerRequest) returns (StripeConnectCustomer) {}
    rpc FindByUserAndDr(FindByUserAndDrRequest) returns (StripeConnectCustomer) {}
}

message CreateConnectCustomerRequest {
    user.User user = 1;
    donationReceiver.DonationReceiver donationReceiver = 2;
    string customerId = 3;
}

message FindByUserAndDrRequest {
    user.User user = 1;
    donationReceiver.DonationReceiver donationReceiver = 2;
}

message StripeConnectCustomer {
    string uid = 1;
    string customerId = 2;
    string userUid = 3;
    string donationReceiverUid = 4;
}

message UpdateUserStripeCustomerIdRequest {
    string uid = 1;
    string stripeCustomerId = 2;
}

message GetDonationCountByDrIdRequest {
    string donationReceiverUid = 1;
}

message GetDonationCountByDrIdResponse {
    int32 count = 1;
}
